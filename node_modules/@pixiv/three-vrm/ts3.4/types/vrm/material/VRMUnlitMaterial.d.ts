import * as THREE from 'three';
export interface VRMUnlitMaterialParameters extends THREE.ShaderMaterialParameters {
    cutoff?: number;
    map?: THREE.Texture;
    mainTex?: THREE.Texture;
    mainTex_ST?: THREE.Vector4;
    renderType?: VRMUnlitMaterialRenderType | number;
}
export declare enum VRMUnlitMaterialRenderType {
    Opaque = 0,
    Cutout = 1,
    Transparent = 2,
    TransparentWithZWrite = 3
}
export declare class VRMUnlitMaterial extends THREE.ShaderMaterial {
    readonly isVRMUnlitMaterial: boolean;
    cutoff: number;
    map: THREE.Texture | null;
    mainTex_ST: THREE.Vector4;
    private _renderType;
    shouldApplyUniforms: boolean;
    constructor(parameters?: VRMUnlitMaterialParameters);
    mainTex: THREE.Texture | null;
    renderType: VRMUnlitMaterialRenderType;
    updateVRMMaterials(delta: number): void;
    copy(source: this): this;
    private _applyUniforms;
    private _updateShaderCode;
}
