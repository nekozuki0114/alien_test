export declare namespace VRMSchema {
    interface VRM {
        blendShapeMaster?: BlendShape;
        exporterVersion?: string;
        firstPerson?: FirstPerson;
        humanoid?: Humanoid;
        materialProperties?: Material[];
        meta?: Meta;
        secondaryAnimation?: SecondaryAnimation;
        specVersion?: string;
    }
    interface BlendShape {
        blendShapeGroups?: BlendShapeGroup[];
    }
    interface BlendShapeGroup {
        binds?: BlendShapeBind[];
        isBinary?: boolean;
        materialValues?: BlendShapeMaterialbind[];
        name?: string;
        presetName?: BlendShapePresetName;
    }
    interface BlendShapeBind {
        index?: number;
        mesh?: number;
        weight?: number;
    }
    interface BlendShapeMaterialbind {
        materialName?: string;
        propertyName?: string;
        targetValue?: number[];
    }
    enum BlendShapePresetName {
        A = "a",
        Angry = "angry",
        Blink = "blink",
        BlinkL = "blink_l",
        BlinkR = "blink_r",
        E = "e",
        Fun = "fun",
        I = "i",
        Joy = "joy",
        Lookdown = "lookdown",
        Lookleft = "lookleft",
        Lookright = "lookright",
        Lookup = "lookup",
        Neutral = "neutral",
        O = "o",
        Sorrow = "sorrow",
        U = "u",
        Unknown = "unknown"
    }
    interface FirstPerson {
        firstPersonBone?: number;
        firstPersonBoneOffset?: Vector3;
        lookAtHorizontalInner?: FirstPersonDegreeMap;
        lookAtHorizontalOuter?: FirstPersonDegreeMap;
        lookAtTypeName?: FirstPersonLookAtTypeName;
        lookAtVerticalDown?: FirstPersonDegreeMap;
        lookAtVerticalUp?: FirstPersonDegreeMap;
        meshAnnotations?: FirstPersonMeshannotation[];
    }
    interface FirstPersonDegreeMap {
        curve?: number[];
        xRange?: number;
        yRange?: number;
    }
    enum FirstPersonLookAtTypeName {
        BlendShape = "BlendShape",
        Bone = "Bone"
    }
    interface FirstPersonMeshannotation {
        firstPersonFlag?: string;
        mesh?: number;
    }
    interface Humanoid {
        armStretch?: number;
        feetSpacing?: number;
        hasTranslationDoF?: boolean;
        humanBones?: HumanoidBone[];
        legStretch?: number;
        lowerArmTwist?: number;
        lowerLegTwist?: number;
        upperArmTwist?: number;
        upperLegTwist?: number;
    }
    interface HumanoidBone {
        axisLength?: number;
        bone?: HumanoidBoneName;
        center?: Vector3;
        max?: Vector3;
        min?: Vector3;
        node?: number;
        useDefaultValues?: boolean;
    }
    enum HumanoidBoneName {
        Chest = "chest",
        Head = "head",
        Hips = "hips",
        Jaw = "jaw",
        LeftEye = "leftEye",
        LeftFoot = "leftFoot",
        LeftHand = "leftHand",
        LeftIndexDistal = "leftIndexDistal",
        LeftIndexIntermediate = "leftIndexIntermediate",
        LeftIndexProximal = "leftIndexProximal",
        LeftLittleDistal = "leftLittleDistal",
        LeftLittleIntermediate = "leftLittleIntermediate",
        LeftLittleProximal = "leftLittleProximal",
        LeftLowerArm = "leftLowerArm",
        LeftLowerLeg = "leftLowerLeg",
        LeftMiddleDistal = "leftMiddleDistal",
        LeftMiddleIntermediate = "leftMiddleIntermediate",
        LeftMiddleProximal = "leftMiddleProximal",
        LeftRingDistal = "leftRingDistal",
        LeftRingIntermediate = "leftRingIntermediate",
        LeftRingProximal = "leftRingProximal",
        LeftShoulder = "leftShoulder",
        LeftThumbDistal = "leftThumbDistal",
        LeftThumbIntermediate = "leftThumbIntermediate",
        LeftThumbProximal = "leftThumbProximal",
        LeftToes = "leftToes",
        LeftUpperArm = "leftUpperArm",
        LeftUpperLeg = "leftUpperLeg",
        Neck = "neck",
        RightEye = "rightEye",
        RightFoot = "rightFoot",
        RightHand = "rightHand",
        RightIndexDistal = "rightIndexDistal",
        RightIndexIntermediate = "rightIndexIntermediate",
        RightIndexProximal = "rightIndexProximal",
        RightLittleDistal = "rightLittleDistal",
        RightLittleIntermediate = "rightLittleIntermediate",
        RightLittleProximal = "rightLittleProximal",
        RightLowerArm = "rightLowerArm",
        RightLowerLeg = "rightLowerLeg",
        RightMiddleDistal = "rightMiddleDistal",
        RightMiddleIntermediate = "rightMiddleIntermediate",
        RightMiddleProximal = "rightMiddleProximal",
        RightRingDistal = "rightRingDistal",
        RightRingIntermediate = "rightRingIntermediate",
        RightRingProximal = "rightRingProximal",
        RightShoulder = "rightShoulder",
        RightThumbDistal = "rightThumbDistal",
        RightThumbIntermediate = "rightThumbIntermediate",
        RightThumbProximal = "rightThumbProximal",
        RightToes = "rightToes",
        RightUpperArm = "rightUpperArm",
        RightUpperLeg = "rightUpperLeg",
        Spine = "spine",
        UpperChest = "upperChest"
    }
    interface Material {
        floatProperties?: {
            [key: string]: any;
        };
        keywordMap?: {
            [key: string]: any;
        };
        name?: string;
        renderQueue?: number;
        shader?: string;
        tagMap?: {
            [key: string]: any;
        };
        textureProperties?: {
            [key: string]: any;
        };
        vectorProperties?: {
            [key: string]: any;
        };
    }
    interface Meta {
        allowedUserName?: MetaAllowedUserName;
        author?: string;
        commercialUssageName?: MetaUssageName;
        contactInformation?: string;
        licenseName?: MetaLicenseName;
        otherLicenseUrl?: string;
        otherPermissionUrl?: string;
        reference?: string;
        sexualUssageName?: MetaUssageName;
        texture?: number;
        title?: string;
        version?: string;
        violentUssageName?: MetaUssageName;
    }
    enum MetaAllowedUserName {
        Everyone = "Everyone",
        ExplicitlyLicensedPerson = "ExplicitlyLicensedPerson",
        OnlyAuthor = "OnlyAuthor"
    }
    enum MetaUssageName {
        Allow = "Allow",
        Disallow = "Disallow"
    }
    enum MetaLicenseName {
        Cc0 = "CC0",
        CcBy = "CC_BY",
        CcByNc = "CC_BY_NC",
        CcByNcNd = "CC_BY_NC_ND",
        CcByNcSa = "CC_BY_NC_SA",
        CcByNd = "CC_BY_ND",
        CcBySa = "CC_BY_SA",
        Other = "Other",
        RedistributionProhibited = "Redistribution_Prohibited"
    }
    interface SecondaryAnimation {
        boneGroups?: SecondaryAnimationSpring[];
        colliderGroups?: SecondaryAnimationCollidergroup[];
    }
    interface SecondaryAnimationSpring {
        bones?: number[];
        center?: number;
        colliderGroups?: number[];
        comment?: string;
        dragForce?: number;
        gravityDir?: Vector3;
        gravityPower?: number;
        hitRadius?: number;
        stiffiness?: number;
    }
    interface SecondaryAnimationCollidergroup {
        colliders?: SecondaryAnimationCollider[];
        node?: number;
    }
    interface SecondaryAnimationCollider {
        offset?: Vector3;
        radius?: number;
    }
    interface Vector3 {
        x?: number;
        y?: number;
        z?: number;
    }
}
