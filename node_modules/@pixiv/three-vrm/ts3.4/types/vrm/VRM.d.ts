import * as THREE from 'three';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { VRMBlendShapeProxy } from './blendshape';
import { VRMFirstPerson } from './firstperson';
import { VRMHumanoid } from './humanoid';
import { VRMLookAtHead } from './lookat';
import { VRMSpringBoneManager } from './springbone';
import { VRMSchema } from './types';
import { VRMImporterOptions } from './VRMImporter';
export interface VRMParameters {
    scene: THREE.Scene | THREE.Group;
    humanoid?: VRMHumanoid;
    blendShapeProxy?: VRMBlendShapeProxy;
    firstPerson?: VRMFirstPerson;
    lookAt?: VRMLookAtHead;
    materials?: THREE.Material[];
    springBoneManager?: VRMSpringBoneManager;
    meta?: VRMSchema.Meta;
}
export declare class VRM {
    static from(gltf: GLTF, options?: VRMImporterOptions): Promise<VRM>;
    readonly scene: THREE.Scene | THREE.Group;
    readonly humanoid?: VRMHumanoid;
    readonly blendShapeProxy?: VRMBlendShapeProxy;
    readonly firstPerson?: VRMFirstPerson;
    readonly lookAt?: VRMLookAtHead;
    readonly materials?: THREE.Material[];
    readonly meta?: VRMSchema.Meta;
    readonly springBoneManager?: VRMSpringBoneManager;
    constructor(params: VRMParameters);
    update(delta: number): void;
    dispose(): void;
}
