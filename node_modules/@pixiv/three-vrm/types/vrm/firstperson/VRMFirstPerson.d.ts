import * as THREE from 'three';
import { GLTFMesh, GLTFNode } from '../types';
declare enum FirstPersonFlag {
    Auto = 0,
    Both = 1,
    ThirdPersonOnly = 2,
    FirstPersonOnly = 3
}
export declare class VRMRendererFirstPersonFlags {
    private static _parseFirstPersonFlag;
    firstPersonFlag: FirstPersonFlag;
    mesh: GLTFMesh;
    constructor(firstPersonFlag: string | undefined, mesh: GLTFMesh);
}
export declare class VRMFirstPerson {
    private static readonly _DEFAULT_FIRSTPERSON_ONLY_LAYER;
    private static readonly _DEFAULT_THIRDPERSON_ONLY_LAYER;
    private readonly _firstPersonBone;
    private readonly _meshAnnotations;
    private readonly _firstPersonBoneOffset;
    private _firstPersonOnlyLayer;
    private _thirdPersonOnlyLayer;
    private _initialized;
    constructor(firstPersonBone: GLTFNode, firstPersonBoneOffset: THREE.Vector3, meshAnnotations: VRMRendererFirstPersonFlags[]);
    get firstPersonBone(): GLTFNode;
    get meshAnnotations(): VRMRendererFirstPersonFlags[];
    getFirstPersonWorldDirection(target: THREE.Vector3): THREE.Vector3;
    get firstPersonOnlyLayer(): number;
    get thirdPersonOnlyLayer(): number;
    getFirstPersonBoneOffset(target: THREE.Vector3): THREE.Vector3;
    getFirstPersonWorldPosition(v3: THREE.Vector3): THREE.Vector3;
    setup({ firstPersonOnlyLayer, thirdPersonOnlyLayer, }?: {
        firstPersonOnlyLayer?: number | undefined;
        thirdPersonOnlyLayer?: number | undefined;
    }): void;
    private _excludeTriangles;
    private _createErasedMesh;
    private _createHeadlessModelForSkinnedMesh;
    private _createHeadlessModel;
    private _isEraseTarget;
}
export {};
