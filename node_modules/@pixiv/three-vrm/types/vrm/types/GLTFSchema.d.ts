export declare namespace GLTFSchema {
    interface GLTF {
        accessors?: Accessor[];
        animations?: Animation[];
        asset: Asset;
        buffers?: Buffer[];
        bufferViews?: BufferView[];
        cameras?: Camera[];
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extensionsRequired?: string[];
        extensionsUsed?: string[];
        extras?: any;
        images?: Image[];
        materials?: Material[];
        meshes?: Mesh[];
        nodes?: Node[];
        samplers?: Sampler[];
        scene?: number;
        scenes?: Scene[];
        skins?: Skin[];
        textures?: Texture[];
    }
    interface Accessor {
        bufferView?: number;
        byteOffset?: number;
        componentType: number;
        count: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        max?: number[];
        min?: number[];
        name?: string;
        normalized?: boolean;
        sparse?: AccessorSparse;
        type: string;
    }
    interface AccessorSparse {
        count: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        indices: AccessorSparseIndices;
        values: AccessorSparseValues;
    }
    interface AccessorSparseIndices {
        bufferView: number;
        byteOffset?: number;
        componentType: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
    }
    interface AccessorSparseValues {
        bufferView: number;
        byteOffset?: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
    }
    interface Animation {
        channels: AnimationChannel[];
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        samplers: AnimationSampler[];
    }
    interface AnimationChannel {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        sampler: number;
        target: AnimationChannelTarget;
    }
    interface AnimationChannelTarget {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        node?: number;
        path: string;
    }
    interface AnimationSampler {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        input: number;
        interpolation?: string;
        output: number;
    }
    interface Asset {
        copyright?: string;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        generator?: string;
        minVersion?: string;
        version: string;
    }
    interface BufferView {
        buffer: number;
        byteLength: number;
        byteOffset?: number;
        byteStride?: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        target?: number;
    }
    interface Buffer {
        byteLength: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        uri?: string;
    }
    interface Camera {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        orthographic?: CameraOrthographic;
        perspective?: CameraPerspective;
        type: string;
    }
    interface CameraOrthographic {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        xmag: number;
        ymag: number;
        zfar: number;
        znear: number;
    }
    interface CameraPerspective {
        aspectRatio?: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        yfov: number;
        zfar?: number;
        znear: number;
    }
    interface Image {
        bufferView?: number;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        mimeType?: string;
        name?: string;
        uri?: string;
    }
    interface Material {
        alphaCutoff?: number;
        alphaMode?: string;
        doubleSided?: boolean;
        emissiveFactor?: number[];
        emissiveTexture?: TextureInfo;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        normalTexture?: MaterialNormalTextureInfoObject;
        occlusionTexture?: MaterialOcclusionTextureInfoObject;
        pbrMetallicRoughness?: MaterialPBRMetallicRoughness;
    }
    interface TextureInfo {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        index: number;
        texCoord?: number;
    }
    interface MaterialNormalTextureInfoObject {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        index: number;
        scale?: number;
        texCoord?: number;
    }
    interface MaterialOcclusionTextureInfoObject {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        index: number;
        strength?: number;
        texCoord?: number;
    }
    interface MaterialPBRMetallicRoughness {
        baseColorFactor?: number[];
        baseColorTexture?: TextureInfo;
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        metallicFactor?: number;
        metallicRoughnessTexture?: TextureInfo;
        roughnessFactor?: number;
    }
    interface Mesh {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        primitives: MeshPrimitive[];
        weights?: number[];
    }
    interface MeshPrimitive {
        attributes: {
            [key: string]: number;
        };
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        indices?: number;
        material?: number;
        mode?: number;
        targets?: {
            [key: string]: number;
        }[];
    }
    interface Node {
        camera?: number;
        children?: number[];
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        matrix?: number[];
        mesh?: number;
        name?: string;
        rotation?: number[];
        scale?: number[];
        skin?: number;
        translation?: number[];
        weights?: number[];
    }
    interface Sampler {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        magFilter?: number;
        minFilter?: number;
        name?: string;
        wrapS?: number;
        wrapT?: number;
    }
    interface Scene {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        nodes?: number[];
    }
    interface Skin {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        inverseBindMatrices?: number;
        joints: number[];
        name?: string;
        skeleton?: number;
    }
    interface Texture {
        extensions?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        extras?: any;
        name?: string;
        sampler?: number;
        source?: number;
    }
}
